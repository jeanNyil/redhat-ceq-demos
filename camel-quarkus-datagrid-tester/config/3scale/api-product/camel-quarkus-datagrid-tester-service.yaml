---
apiVersion: capabilities.3scale.net/v1beta1
kind: Product
metadata:
  name: camel-quarkus-datagrid-tester-service
spec:
  name: Camel Quarkus & Datagrid Tester Service
  systemName: camel-quarkus-datagrid-tester-service
  description: >-
    This API product tests the integration of Red Hat''s build of Apache Camel for Quarkus with Red Hat Data Grid. 
    It exposes two backend services: fruits-and-legumes-api, which demonstrates CRUD operations on Red Hat Data Grid using Camel; 
    and minio-file-uploader-service, which tests the Idempotent Consumer EIP with Red Hat Data Grid as a remote idempotent repository. 
    The API validates integration patterns between Camel, Quarkus, and Red Hat Data Grid.
  mappingRules:
  - httpMethod: GET
    pattern: "/v1/fruits-and-legumes-api/fruits$"
    metricMethodRef: get-fruits
    increment: 1
    last: false
  - httpMethod: POST
    pattern: "/v1/fruits-and-legumes-api/fruits$"
    metricMethodRef: add-fruit
    increment: 1
    last: false
  - httpMethod: GET
    pattern: "/v1/fruits-and-legumes-api/legumes$"
    metricMethodRef: get-legumes
    increment: 1
    last: false
  - httpMethod: POST
    pattern: "/v1/minio-file-uploader-service/csv$"
    metricMethodRef: upload-csv-file
    increment: 1
    last: false
  - httpMethod: POST
    pattern: "/v1/minio-file-uploader-service/json$"
    metricMethodRef: upload-json-file
    increment: 1
    last: false
  - httpMethod: POST
    pattern: "/v1/minio-file-uploader-service/xml$"
    metricMethodRef: upload-xml-file
    increment: 1
    last: false
  metrics:
    hits:
      friendlyName: Hits
      unit: hit
      description: Number of API hits
    status-200:
      friendlyName: status-200
      unit: count
      description: Number of 200 HTTP return codes from the upstream backend
    status-201:
      friendlyName: status-201
      unit: count
      description: Number of 201 HTTP return codes from the upstream backend
    status-500:
      friendlyName: status-500
      unit: count
      description: Number of 500 HTTP return codes from the upstream backend
  methods:
    get-fruits:
      friendlyName: getFruits
      description: Returns a list of hard-coded and added fruits
    add-fruit:
      friendlyName: addFruit
      description: Adds a fruit
    get-legumes:
      friendlyName: getLegumes
      description: Returns a list of hard-coded legumes
    upload-json-file:
      friendlyName: uploadJsonFile
      description: Upload the fruits.json file to MinIO server
    upload-xml-file:
      friendlyName: uploadXmlFile
      description: Upload the fruits.xml file to MinIO server
    upload-csv-file:
      friendlyName: uploadCsvFile
      description: Upload the fruits.csv file to MinIO server
  policies:
  - name: cors
    version: builtin
    configuration:
      allow_headers:
      - Authorization
      - Content-Type
      allow_credentials: true
      allow_methods:
      - GET
      - POST
      - OPTIONS
      allow_origin: "(apim-demo|apim-demo-admin).apps.ocp4.jnyilimb.eu"
    enabled: true
  - name: caching
    version: builtin
    configuration:
      caching_type: resilient
    enabled: true
  - name: logging
    version: builtin
    configuration:
      condition:
        combine_op: and
      custom_logging: >-
        [{{time_local}}] [client IP: "{{jwt.clientAddress}}" - client Id: "{{jwt.clientId}}"] [local: "{{host}}:{{server_port}}"] [remote: "{{remote_addr}}:{{remote_port}}"] [request: "{{request}}" - service Id: "{{service.id}}" - service name: "{{service.system_name}}" - status: "{{status}}" - body bytes sent: "{{body_bytes_sent}}" - request time: "{{request_time}}" - post action impact: "{{post_action_impact}}"]
      enable_access_logs: true
    enabled: true
  - name: custom_metrics
    version: builtin
    configuration:
      rules:
      - increment: '1'
        metric: status-{{status}}
        condition:
          operations:
          - left_type: liquid
            right_type: plain
            op: "=="
            right: '200'
            left: "{{status}}"
          - left_type: liquid
            right_type: plain
            op: "=="
            right: '201'
            left: "{{status}}"
          - left_type: liquid
            right_type: plain
            op: "=="
            right: '500'
            left: "{{status}}"
          combine_op: or
    enabled: true
  - name: apicast
    version: builtin
    configuration: {}
    enabled: true
  applicationPlans:
    basic-plan:
      name: Basic Plan
      appsRequireApproval: false
      trialPeriod: 0
      setupFee: '0.00'
      costMonth: '0.00'
      published: true
      pricingRules: []
      limits:
      - period: minute
        value: 10
        metricMethodRef:
          systemName: get-fruits
      - period: minute
        value: 10
        metricMethodRef:
          systemName: add-fruit
      - period: minute
        value: 10
        metricMethodRef:
          systemName: get-legumes
      - period: minute
        value: 10
        metricMethodRef:
          systemName: upload-json-file
      - period: minute
        value: 10
        metricMethodRef:
          systemName: upload-xml-file
      - period: minute
        value: 10
        metricMethodRef:
          systemName: upload-csv-file
    premium-plan:
      name: Premium Plan
      appsRequireApproval: true
      trialPeriod: 0
      setupFee: '30.00'
      costMonth: '5.00'
      published: true
      pricingRules:
      - from: 1
        to: 1000
        pricePerUnit: '0.05'
        metricMethodRef:
          systemName: get-fruits
      - from: 1001
        to: 1000000
        pricePerUnit: '0.01'
        metricMethodRef:
          systemName: get-fruits
      - from: 1
        to: 1000
        pricePerUnit: '0.05'
        metricMethodRef:
          systemName: add-fruit
      - from: 1001
        to: 1000000
        pricePerUnit: '0.01'
        metricMethodRef:
          systemName: add-fruit
      - from: 1
        to: 1000
        pricePerUnit: '0.05'
        metricMethodRef:
          systemName: get-legumes
      - from: 1001
        to: 1000000
        pricePerUnit: '0.01'
        metricMethodRef:
          systemName: get-legumes
      limits:
      - period: minute
        value: 60
        metricMethodRef:
          systemName: upload-json-file
      - period: minute
        value: 60
        metricMethodRef:
          systemName: upload-xml-file
      - period: minute
        value: 60
        metricMethodRef:
          systemName: upload-csv-file
  backendUsages:
    fruits-and-legumes-api-backend:
      path: "/v1/fruits-and-legumes-api"
    minio-file-uploader-service-backend:
      path: "/v1/minio-file-uploader-service"
  deployment:
    apicastSelfManaged:
      authentication:
        oidc:
          issuerType: keycloak
          issuerEndpoint: https://threescale-apim-demo-zync:idaiFvGJviFDxYzwlz4wjW4BZV550JRS@sso.apps.ocp4.jnyilimb.eu/realms/openshift-cluster
          jwtClaimWithClientID: azp
          jwtClaimWithClientIDType: plain
          authenticationFlow:
            standardFlowEnabled: false
            implicitFlowEnabled: false
            serviceAccountsEnabled: true
            directAccessGrantsEnabled: false
          credentials: headers
      stagingPublicBaseURL: https://camel-quarkus-datagrid-tester-service-staging.apps.ocp4.jnyilimb.eu:443
      productionPublicBaseURL: https://camel-quarkus-datagrid-tester-service.apps.ocp4.jnyilimb.eu:443
---
apiVersion: capabilities.3scale.net/v1beta1
kind: Backend
metadata:
  name: fruits-and-legumes-api-backend
spec:
  name: fruits-and-legumes-api Backend
  systemName: fruits-and-legumes-api-backend
  privateBaseURL: http://camel-quarkus-datagrid-tester.ceq-services-jvm.svc/api/v1/fruits-and-legumes-api
  description: >-
    A simple API to test mainly the Apache Camel Quarkus Platform HTTP and Infinispan extensions.
---
apiVersion: capabilities.3scale.net/v1beta1
kind: Backend
metadata:
  name: minio-file-uploader-service-backend
spec:
  name: minio-file-uploader-service Backend
  systemName: minio-file-uploader-service-backend
  privateBaseURL: http://camel-quarkus-datagrid-tester.ceq-services-jvm.svc/api/v1/minio-file-uploader-service
  description: >-
    A service that triggers the MinIO upload operation for three fruits files (JSON, XML, CSV).